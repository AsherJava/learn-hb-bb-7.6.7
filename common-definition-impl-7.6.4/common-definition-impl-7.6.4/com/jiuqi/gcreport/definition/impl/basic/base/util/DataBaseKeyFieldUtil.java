/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  com.jiuqi.bi.database.DatabaseManager
 *  com.jiuqi.bi.database.IDatabase
 */
package com.jiuqi.gcreport.definition.impl.basic.base.util;

import com.jiuqi.bi.database.DatabaseManager;
import com.jiuqi.bi.database.IDatabase;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class DataBaseKeyFieldUtil {
    private static final List<String> VA_KEYWORD = Arrays.asList("ABORT", "ABORTSESSION", "ABS", "ABSOLUTE", "ACCESS", "ACCESS_LOCK", "ACCESSIBLE", "ACCOUNT", "ACOS", "ACOSH", "ACTION", "ACTIVATE", "ADD", "ADD_MONTHS", "ADMIN", "AFTER", "AGGREGATE", "ALIAS", "ALL", "ALLOCATE", "ALLOW", "ALTER", "AMP", "ANALYSE", "ANALYZE", "AND", "ANSIDATE", "ANY", "ARE", "ARITH_OVERFLOW", "ARRAY", "ARRAYLEN", "AS", "ASC", "ASENSITIVE", "ASIN", "ASINH", "ASSERTION", "ASSOCIATE", "ASUTIME", "ASYMMETRIC", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", "ATTACH", "ATTRIBUTES", "AUDIT", "AUTHORIZATION", "AUTOINCREMENT", "AUX", "AUXILIARY", "AVE", "AVERAGE", "AVG", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BIT", "BIT_LENGTH", "BLOB", "BOOLEAN", "BOTH", "BREADTH", "BREAK", "BROWSE", "BT", "BUFFERPOOL", "BULK", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CACHE", "CALL", "CALLED", "CAPTURE", "CARDINALITY", "CASCADE", "CASCADED", "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CATALOG", "CCSID", "CD", "CHANGE", "CHAR", "CHAR2HEXINT", "CHAR_CONVERT", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", "CLOB", "CLONE", "CLOSE", "CLUSTER", "CLUSTERED", "CM", "COALESCE", "COLLATE", "COLLATION", "COLLECT", "COLLECTION", "COLLID", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", "COMPUTE", "CONCAT", "CONDITION", "CONFIRM", "CONFLICT", "CONNECT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONTROLROW", "CONVERT", "CONVERT_TABLE_HEADER", "CORR", "CORRESPONDING", "COS", "COSH", "COUNT", "COUNT_BIG", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CS", "CSUM", "CT", "CUBE", "CURRENT", "CURRENT_CONNECTION", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_LC_CTYPE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_SERVER", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TIMEZONE", "CURRENT_TRANSACTION", "CURRENT_TRANSACTION_ISOLATION_LEVEL", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER", "CURRENT_UTCDATE", "CURRENT_UTCTIME", "CURRENT_UTCTIMESTAMP", "CURRVAL", "CURSOR", "CV", "CYCLE", "DATA", "DATABASE", "DATABASES", "DATABLOCKSIZE", "DATAPARTITIONNAME", "DATAPARTITIONNUM", "DATE", "DATEFORM", "DAY", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DAYS", "DB2GENERAL", "DB2GENRL", "DB2SQL", "DBCC", "DBINFO", "DBPARTITIONNAME", "DBPARTITIONNUM", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINITION", "DEGREES", "DEL", "DELAYED", "DELETE", "DENSE_RANK", "DENSERANK", "DENY", "DEPTH", "DEREF", "DESC", "DESCRIBE", "DESCRIPTOR", "DETACH", "DETERMINISTIC", "DIAGNOSTIC", "DIAGNOSTICS", "DISABLE", "DISABLED", "DISALLOW", "DISCONNECT", "DISK", "DISKDISTINCT", "DISTINCT", "DISTINCTROW", "DISTRIBUTED", "DIV", "DO", "DOCUMENT", "DOMAIN", "DOUBLE", "DROP", "DSSIZE", "DUAL", "DUMMY", "DUMP", "DYNAMIC", "EACH", "ECHO", "EDITPROC", "ELEMENT", "ELSE", "ELSEIF", "ENABLE", "ENABLED", "ENCLOSED", "ENCODING", "ENCRYPTION", "END", "END-EXEC", "ENDING", "ENDTRAN", "EQ", "EQUALS", "ERASE", "ERRLVL", "ERROR", "ERRORDATA", "ERROREXIT", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ESCAPED", "ET", "EVERY", "EXCEPT", "EXCEPTION", "EXCLUDING", "EXCLUSIVE", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", "EXP_ROW_SIZE", "EXPLAIN", "EXTENDED", "EXTERNAL", "EXTRACT", "FAIL", "FALLBACK", "FALSE", "FASTEXPORT", "FENCED", "FETCH", "FIELDPROC", "FILE", "FILLFACTOR", "FILTER", "FINAL", "FIRST", "FLOAT", "FLOAT4", "FLOAT8", "FOR", "FORCE", "FOREIGN", "FORMAT", "FOUND", "FREE", "FREESPACE", "FREETEXT", "FREETEXTTABLE", "FREEZE", "FROM", "FULL", "FULLTEXT", "FUNC", "FUNCTION", "GDSCODE", "GE", "GENERAL", "GENERATED", "GENERATED", "GET", "GIVE", "GLOB", "GLOBAL", "GO", "GOTO", "GRANT", "GRAPHIC", "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", "HASHBAKAMP", "HASHBUCKET", "HASHED_VALUE", "HASHROW", "HAVING", "HELP", "HIGH_PRIORITY", "HINT", "HOLD", "HOLDLOCK", "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "HOURS", "IDENTIFIED", "IDENTITY", "IDENTITY_GAP", "IDENTITY_INSERT", "IDENTITY_START", "IDENTITYCOL", "IF", "IGNORE", "IGNORE_SERVER_IDS", "ILIKE", "IMMEDIATE", "IN", "INCLUDING", "INCLUSIVE", "INCONSISTENT", "INCREMENT", "INDEX", "INDEXED", "INDICATOR", "INDICATORS", "INF", "INFILE", "INFINITY", "INHERIT", "INITIAL", "INITIALLY", "INITIATE", "INNER", "INOUT", "INPUT", "INS", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTEGERDATE", "INTEGRITY", "INTERSECT", "INTERVAL", "INTO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IS", "ISNULL", "ISOBID", "ISOLATION", "ITERATE", "JAR", "JAVA", "JOIN", "JOURNAL", "KEEP", "KEY", "KEYS", "KILL", "KURTOSIS", "LABEL", "LANGUAGE", "LARGE", "LAST", "LATERAL", "LC_CTYPE", "LE", "LEADING", "LEAVE", "LEFT", "LEVEL", "LIKE", "LIMIT", "LINEAR", "LINENO", "LINES", "LINKTYPE", "LN", "LOAD", "LOADING", "LOCAL", "LOCALDATE", "LOCALE", "LOCALTIME", "LOCALTIMESTAMP", "LOCATOR", "LOCATORS", "LOCK", "LOCKING", "LOCKMAX", "LOCKSIZE", "LOG", "LOGGING", "LOGON", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "LOWER", "LT", "MACRO", "MAINTAINED", "MAP", "MASTER_BIND", "MASTER_HEARTBEAT_PERIOD", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MATERIALIZED", "MAVG", "MAX", "MAX_ROWS_PER_PAGE", "MAXEXTENTS", "MAXIMUM", "MAXIMUM_SEGMENT", "MAXVALUE", "MCHARACTERS", "MDIFF", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEMBER", "MERGE", "METHOD", "MICROSECOND", "MICROSECONDS", "MIDDLEINT", "MIN", "MINDEX", "MINIMUM", "MINUS", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MINUTES", "MINVALUE", "MIRROR", "MIRROREXIT", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", "MODIFY", "MODULE", "MONITOR", "MONRESOURCE", "MONSESSION", "MONTH", "MONTHS", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NAMES", "NAN", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NE", "NEW", "NEW_TABLE", "NEXT", "NEXTVAL", "NO", "NO_WRITE_TO_BINLOG", "NOAUDIT", "NOCACHE", "NOCHECK", "NOCOMPRESS", "NOCYCLE", "NODENAME", "NODENUMBER", "NOHOLDLOCK", "NOMAXVALUE", "NOMINVALUE", "NONCLUSTERED", "NONE", "NOORDER", "NORMALIZED", "NOT", "NOTFOUND", "NOTNULL", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", "NULLS", "NUMBER", "NUMERIC", "NUMERIC_TRUNCATION", "NUMPARTS", "OBID", "OBJECT", "OBJECTS", "OCTET_LENGTH", "OF", "OFF", "OFFLINE", "OFFSET", "OFFSETS", "OLD", "OLD_TABLE", "ON", "ONCE", "ONLINE", "ONLY", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", "OPTIMIZATION", "OPTIMIZE", "OPTIMIZER_COSTS", "OPTION", "OPTIONALLY", "OR", "ORDER", "ORDINALITY", "OUT", "OUTER", "OUTFILE", "OUTPUT", "OVER", "OVERLAPS", "OVERRIDE", "OVERRIDING", "PACKAGE", "PAD", "PADDED", "PAGESIZE", "PARAMETER", "PART", "PARTIAL", "PARTITION", "PARTITIONED", "PARTITIONING", "PARTITIONS", "PASSWORD", "PATH", "PCTFREE", "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "PIECESIZE", "PIVOT", "PLACING", "PLAN", "POSITION", "POST_EVENT", "PRAGMA", "PRECISION", "PREPARE", "PRESERVE", "PREVVAL", "PRIMARY", "PRINT", "PRIOR", "PRIQTY", "PRIVATE", "PRIVILEGES", "PROC", "PROCEDURE", "PROCESSEXIT", "PROFILE", "PROGRAM", "PROPORTIONAL", "PROTECTION", "PROXY_TABLE", "PSID", "PUBLIC", "PURGE", "QUALIFIED", "QUALIFY", "QUANTILE", "QUERY", "QUERYNO", "QUIESCE", "RADIANS", "RAISE", "RAISERROR", "RANDOM", "RANGE", "RANGE_N", "RANK", "RAW", "RDB$DB_KEY", "READ", "READ_WRITE", "READPAST", "READS", "READTEXT", "REAL", "RECONFIGURE", "RECORD_VERSION", "RECOVERY", "RECREATE", "RECURSIVE", "REF", "REFERENCES", "REFERENCESREMOVE", "REFERENCING", "REFRESH", "REGEXP", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REORG", "REPEAT", "REPLACE", "REPLICATION", "REPOVERRIDE", "REQUEST", "REQUIRE", "RESERVEPAGEGAP", "RESET", "RESIGNAL", "RESOURCE", "RESTART", "RESTORE", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNING_VALUES", "RETURNS", "REVALIDATE", "REVERSE", "REVERT", "REVOKE", "RIGHT", "RIGHTS", "RLIKE", "ROLE", "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_UP", "ROUND_UP", "ROUTINE", "ROW", "ROW_COUNT", "ROW_NUMBER", "ROWCOUNT", "ROWGUIDCOL", "ROWID", "ROWLABEL", "ROWNUM", "ROWNUMBER", "ROWS", "ROWSET", "RRN", "RULE", "RUN", "SAMPLE", "SAMPLEID", "SAVE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCRATCHPAD", "SCROLL", "SEARCH", "SECOND", "SECOND_MICROSECOND", "SECONDS", "SECQTY", "SECTION", "SECURITY", "SECURITYAUDIT", "SEL", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SENSITIVE", "SEPARATOR", "SEQUENCE", "SESSION", "SESSION_USER", "SET", "SETRESRATE", "SETS", "SETSESSRATE", "SETUSER", "SHARE", "SHARED", "SHOW", "SHUTDOWN", "SIGNAL", "SIMILAR", "SIMPLE", "SIN", "SINH", "SIZE", "SKEW", "SLOW", "SMALLINT", "SNAN", "SOME", "SOUNDEX", "SOURCE", "SPACE", "SPATIAL", "SPECIFIC", "SPECIFICTYPE", "SPOOL", "SQL", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SQLBUF", "SQLCODE", "SQLERROR", "SQLEXCEPTION", "SQLID", "SQLSTATE", "SQLTEXT", "SQLWARNING", "SQRT", "SS", "SSL", "STACKED", "STANDARD", "START", "STARTING", "STARTUP", "STATE", "STATEMENT", "STATIC", "STATISTICS", "STATMENT", "STAY", "STOGROUP", "STORED", "STORES", "STRAIGHT_JOIN", "STRINGSIZE", "STRIPE", "STYLE", "SUBMULTISET", "SUBSTRING", "SUCCESSFUL", "SUM", "SUMMARY", "SYB_IDENTITY", "SYB_RESTREE", "SYB_TERMINATE", "SYMMETRIC", "SYNONYM", "SYSDATE", "SYSFUN", "SYSIBM", "SYSPROC", "SYSTEM", "SYSTEM_USER", "SYSTIME", "SYSTIMESTAMP", "SYSUUID", "TABLE", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPORARY", "TERMINATED", "TEXTSIZE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TODAY", "TOP", "TRAILING", "TRAN", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "TYPE", "UID", "UNDER", "UNDO", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNNEST", "UNPARTITION", "UNPIVOT", "UNSIGNED", "UNTIL", "UPDATE", "UPDATETEXT", "UPPER", "USAGE", "USE", "USER", "USER_OPTION", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "UTCTIMESTAMP", "VACUUM", "VALIDATE", "VALIDPROC", "VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARCHAR2", "VARCHARACTER", "VARIABLE", "VARIANT", "VARYING", "VCAT", "VERBOSE", "VERSION", "VIEW", "VIRTUAL", "VIRTUAL", "VOLATILE", "VOLUMES", "WAITFOR", "WHEN", "WHENEVER", "WHERE", "WHILE", "WINDOW", "WITH", "WITHIN", "WITHINGROUP", "WITHOUT", "WLM", "WORK", "WRITE", "WRITETEXT", "XMLELEMENT", "XMLEXISTS", "XMLNAMESPACES", "XOR", "YEAR", "YEAR_MONTH", "YEARS", "ZEROFILL", "ZONE");
    private static final Set<String> DataBaseKeyFields = new HashSet<String>();

    private static Set<String> getKeyField() {
        if (DataBaseKeyFields.isEmpty()) {
            try {
                DataBaseKeyFields.addAll(DataBaseKeyFieldUtil.getBIKeyWords());
                DataBaseKeyFields.addAll(VA_KEYWORD);
            }
            catch (SQLException e) {
                e.printStackTrace();
                DataBaseKeyFields.clear();
            }
        }
        return DataBaseKeyFields;
    }

    private static Set<String> getBIKeyWords() throws SQLException {
        HashSet<String> keyWords = new HashSet<String>();
        Iterator allDatabases = DatabaseManager.getInstance().getAllDatabase();
        while (allDatabases.hasNext()) {
            IDatabase database = (IDatabase)allDatabases.next();
            Set dbkeyWords = database.getDescriptor().getKeyWords();
            if (dbkeyWords == null) continue;
            keyWords.addAll(dbkeyWords);
        }
        return keyWords;
    }

    public static boolean isKeyField(String fieldName) {
        return DataBaseKeyFieldUtil.getKeyField().contains(fieldName);
    }

    static {
        DataBaseKeyFieldUtil.getKeyField();
    }
}

